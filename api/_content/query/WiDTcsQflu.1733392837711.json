{"_path":"/posts/create-rest-api-with-go-gin-gorm-and-postgres","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"Create Rest Api With Go Gin GORM and Postgres","description":"In this post we'll create an API using Go, Gin and GORM, which will allow us to save and fetch todo items from a Postgres database.","date":"2024-04-22T15:30:28.000Z","draft":false,"tags":["Go","Gin","GORM","Postgres","API"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this post we'll create an API using Go, Gin and GORM, that will allow us to save and fetch todo items from a Postgres database."}]},{"type":"element","tag":"h2","props":{"id":"project-setup"},"children":[{"type":"text","value":"Project Setup"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To start the project setup, create a directory (folder) with the name of your project. Here I'll create a directory named "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"todo-go-backend"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's initialize Go module in our project so that we can install libraries using go mod. Run the following command in the project directory:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go mod init your-module-name\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go mod init your-module-name\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Most popular convention for naming the go modules is this, Let's assume you are going to push your project on GitHub then module name would look something like this "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"github.com/[your-username]/[project-name]"}]},{"type":"text","value":". So here I am going to name the module "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"github.com/dvlpr-shivendra/todo-go-backend"}]},{"type":"text","value":". So I would initialize the module like this:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go mod init github.com/dvlpr-shivendra/todo-go-backend\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go mod init github.com/dvlpr-shivendra/todo-go-backend\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now inside the project directory create a file named "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"main.go"}]},{"type":"text","value":" and paste the following code in that file."}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package main\n\nfunc main() {\n    //\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package main\n\nfunc main() {\n    //\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"gin-setup"},"children":[{"type":"text","value":"Gin Setup"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First of all let's install Gin. Run the following command in the project's root directory:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go get -u github.com/gin-gonic/gin\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go get -u github.com/gin-gonic/gin\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now import the Gin inside the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"main.go"}]},{"type":"text","value":". Add following code below the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"package main"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"import (\n  \"github.com/gin-gonic/gin\"\n)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import (\n  \"github.com/gin-gonic/gin\"\n)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Inside the main function add this code to initialize the router:"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"r := gin.Default()\n\nr.Run() // listen and serve on localhost:8080\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"r := gin.Default()\n\nr.Run() // listen and serve on localhost:8080\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now we are ready to add end points to the router. Let's add an endpoint to add todo items. Add this code below the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"r := gin.Default()"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"r.POST(\"/todos\", handleAddTodo)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"r.POST(\"/todos\", handleAddTodo)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now ff we hit "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"POST http://localhost:8080/todos"}]},{"type":"text","value":" in the browser then Gin will execute handleAddTodo function, So let's add that above the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"main function"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"func handleAddTodo(c *gin.Context) {\n    c.JSON(200, gin.H{\n        \"message\": \"Here we'll add a new todo\",\n    })\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func handleAddTodo(c *gin.Context) {\n    c.JSON(200, gin.H{\n        \"message\": \"Here we'll add a new todo\",\n    })\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Every Gin route handler receives "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"*gin.Context"}]},{"type":"text","value":" in the argument. Using "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"gin.Context"}]},{"type":"text","value":" we can interact with the request and send the response back."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Right now the complete main.go would look like this"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc handleAddTodo(c *gin.Context) {\n    c.JSON(200, gin.H{\n        \"message\": \"Here we'll add a new todo\",\n    })\n}\n\nfunc main() {\n    r := gin.Default()\n\n    r.POST(\"/todos\", handleAddTodo)\n\n    r.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc handleAddTodo(c *gin.Context) {\n    c.JSON(200, gin.H{\n        \"message\": \"Here we'll add a new todo\",\n    })\n}\n\nfunc main() {\n    r := gin.Default()\n\n    r.POST(\"/todos\", handleAddTodo)\n\n    r.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's test our changes so far. Execute "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"go run main.go"}]},{"type":"text","value":" in the terminal to start the application."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now open some API client and make a "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"POST"}]},{"type":"text","value":" request at "},{"type":"element","tag":"a","props":{"href":"http://localhost:8080/todos","rel":["nofollow"]},"children":[{"type":"text","value":"http://localhost:8080/todos"}]},{"type":"text","value":" and you should get the following response:"}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"{\n    \"message\": \"Here we'll add a new todo\"\n}\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"message\": \"Here we'll add a new todo\"\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now we are ready to install and use GORM."}]},{"type":"element","tag":"h2","props":{"id":"gorm-setup"},"children":[{"type":"text","value":"GORM Setup"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To install GORM run the following command in the terminal:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go get -u gorm.io/gorm\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go get -u gorm.io/gorm\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now let's install Postgres driver for GORM"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go get -u gorm.io/driver/postgres\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go get -u gorm.io/driver/postgres\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We are now ready to connect to the Postgres database. Let's import GORM and the Postgres driver in the import section. After importing the import section should look like this:"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"\"github.com/gin-gonic/gin\"\n\n\"gorm.io/gorm\"\n\"gorm.io/driver/postgres\"\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\"github.com/gin-gonic/gin\"\n\n\"gorm.io/gorm\"\n\"gorm.io/driver/postgres\"\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now let's add a global variable to store the gorm.DB instance, which we'll use to interact with the database. We can add the variable below the import section:"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"var db *gorm.DB\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var db *gorm.DB\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We need to define the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Todo struct"}]},{"type":"text","value":". We'll use this struct to create todo table and to create todo items. Add following code below the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"import section"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type Todo struct {\n    gorm.Model\n    Title     string `json:\"title\"`\n    Completed string `json:\"completed\" gorm:\"default:false\"`\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Todo struct {\n    gorm.Model\n    Title     string `json:\"title\"`\n    Completed string `json:\"completed\" gorm:\"default:false\"`\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"below the db variable let's add a function to connect to the database and store the db instance in the global variable "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"db"}]},{"type":"text","value":" which we just created."}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"func initDb() {\n    var err error\n\n    dsn := \"host=localhost user=postgres password=postgres dbname=todo-app port=5432 sslmode=disable\"\n\n    db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\n    if err != nil {\n        panic(err)\n    }\n\n    db.AutoMigrate(&Todo{}) // create table if not exist\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func initDb() {\n    var err error\n\n    dsn := \"host=localhost user=postgres password=postgres dbname=todo-app port=5432 sslmode=disable\"\n\n    db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\n    if err != nil {\n        panic(err)\n    }\n\n    db.AutoMigrate(&Todo{}) // create table if not exist\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add the details in the dsn string as per your postgres installation."}]},{"type":"element","tag":"h3","props":{"id":"updating-handleaddtodo-to-save-todos-in-database-using-gorm"},"children":[{"type":"text","value":"Updating handleAddTodo to save Todos in database using Gorm"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now let's update the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"handleAddTodo"}]},{"type":"text","value":" to save the todo item in the database using GORM"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"func handleAddTodo(c *gin.Context) {\n    var todo Todo\n    \n    c.BindJSON(&todo) // bind request body to struct\n\n    db.Create(&todo) // insert data to database\n\n    c.JSON(200, todo) // send response\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func handleAddTodo(c *gin.Context) {\n    var todo Todo\n    \n    c.BindJSON(&todo) // bind request body to struct\n\n    db.Create(&todo) // insert data to database\n\n    c.JSON(200, todo) // send response\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now make a "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"POST"}]},{"type":"text","value":" request at "},{"type":"element","tag":"a","props":{"href":"http://localhost:8080/todos","rel":["nofollow"]},"children":[{"type":"text","value":"http://localhost:8080/todos"}]},{"type":"text","value":" . The body of the request should contain following JSON"}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"{\n    \"title\": \"Write a blog\"\n}\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"title\": \"Write a blog\"\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If everything went as expected then todo should get inserted in a table name "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"todos"}]},{"type":"text","value":" and response body should contain the newly created todo."}]},{"type":"element","tag":"h3","props":{"id":"endpoint-to-fetch-todo-list"},"children":[{"type":"text","value":"Endpoint to fetch Todo list"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's add the endpoint to fetch todo list. To define the endpoint add the following code above the endpoint to save todo."}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"r.GET(\"/todos\", handleFetchTodos)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"r.GET(\"/todos\", handleFetchTodos)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now let's define "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"handleFetchTodos"}]},{"type":"text","value":" below the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"handleSaveTodo"}]},{"type":"text","value":" function"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"func handleFetchTodos(c *gin.Context) {\n    var todos []Todo\n    db.Find(&todos)\n    c.JSON(200, todos)\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func handleFetchTodos(c *gin.Context) {\n    var todos []Todo\n    db.Find(&todos)\n    c.JSON(200, todos)\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now make a get request to GET "},{"type":"element","tag":"a","props":{"href":"http://localhost:8080/todos","rel":["nofollow"]},"children":[{"type":"text","value":"http://localhost:8080/todos"}]},{"type":"text","value":" and you should get the array todo in response."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"project-setup","depth":2,"text":"Project Setup"},{"id":"gin-setup","depth":2,"text":"Gin Setup"},{"id":"gorm-setup","depth":2,"text":"GORM Setup","children":[{"id":"updating-handleaddtodo-to-save-todos-in-database-using-gorm","depth":3,"text":"Updating handleAddTodo to save Todos in database using Gorm"},{"id":"endpoint-to-fetch-todo-list","depth":3,"text":"Endpoint to fetch Todo list"}]}]}},"_type":"markdown","_id":"content:posts:create-rest-api-with-go-gin-gorm-and-postgres.md","_source":"content","_file":"posts/create-rest-api-with-go-gin-gorm-and-postgres.md","_stem":"posts/create-rest-api-with-go-gin-gorm-and-postgres","_extension":"md"}