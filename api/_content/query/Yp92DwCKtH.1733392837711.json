[{"_path":"/posts/create-desktop-entry-for-an-app-on-linux","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"How to create Desktop Entry for an App on Linux","description":"Easiest way to create desktop entry for an app on Linux. This guide would work for Supports Budgie, GNOME, KDE, LXDE, MATE, Pantheon, Unity, and Xfce","date":"2023-07-07T17:22:36.000Z","draft":false,"tags":["Linux","Desktop entry","MenuLibre","GNOME","KDE","LXDE","Mate","Pantheon","Unity","Xfce"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This post will guide on how to create desktop entry for an app on Linux. We would use "},{"type":"element","tag":"a","props":{"href":"https://bluesabre.org/projects/menulibre","rel":["nofollow"]},"children":[{"type":"text","value":"MenuLibre"}]},{"type":"text","value":" to do this. MenuLibre is an advance menu editor for the Free and Open Source desktop and supports Budgie, GNOME, KDE, LXDE, MATE, Pantheon, Unity, and Xfce."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Download and extract MenuLibre"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nTo download "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"MenuLibre"}]},{"type":"text","value":" go the the "},{"type":"element","tag":"a","props":{"href":"https://github.com/bluesabre/menulibre","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub Repository"}]},{"type":"text","value":" of MenuLibre and click on the latest release link in the Releases section.\n"},{"type":"element","tag":"img","props":{"alt":"MenuLibre GitHub","src":"/posts/create-desktop-entry-for-an-app-on-linux/MenuLibre-github-page.jpg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now from the Assets section download the MenuLibre tar ball. As of writing this post the name of the file is "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"menulibre-2.2.3.tar.gz"}]},{"type":"element","tag":"img","props":{"alt":"MenuLibre current version","src":"/posts/create-desktop-entry-for-an-app-on-linux/download-menulibre.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To extract the downloaded tar ball execute the following command inside the directory you download MenuLibre:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"tar xvf menulibre-2.2.3.tar.gz\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"tar xvf menulibre-2.2.3.tar.gz\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If your filename if different then replace "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"menulibre-2.2.3.tar.gz"}]},{"type":"text","value":" in the above command."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Creating the desktop entry"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nNow "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cd"}]},{"type":"text","value":" into the extracted MenuLibre directory and execute "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"./bin/menulibre"}]},{"type":"text","value":" and MenuLibre will open.\nNow to create the desktop entry click on the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" button on the top left corner and then click Add launcher.\n"},{"type":"element","tag":"img","props":{"alt":"MenuLibre add launcher","src":"/posts/create-desktop-entry-for-an-app-on-linux/click-add-launcher-button.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now click the briefcase icon to select the icon for the app. Replace the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"New Launcher"}]},{"type":"text","value":" text with the name of the app."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the Application details section inside input with Label command enter the command to launch the app or click the file icon to select the executable file of the app."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And now to save the desktop entry click on the download button on the top left corner of the window.\n"},{"type":"element","tag":"img","props":{"alt":"MenuLibre create and save desktop entry","src":"/posts/create-desktop-entry-for-an-app-on-linux/create-and-save-desktop-entry.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now the app should appear inside all apps."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:posts:create-desktop-entry-for-an-app-on-linux.md","_source":"content","_file":"posts/create-desktop-entry-for-an-app-on-linux.md","_stem":"posts/create-desktop-entry-for-an-app-on-linux","_extension":"md"},{"_path":"/posts/create-rest-api-with-go-gin-gorm-and-postgres","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"Create Rest Api With Go Gin GORM and Postgres","description":"In this post we'll create an API using Go, Gin and GORM, which will allow us to save and fetch todo items from a Postgres database.","date":"2024-04-22T15:30:28.000Z","draft":false,"tags":["Go","Gin","GORM","Postgres","API"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this post we'll create an API using Go, Gin and GORM, that will allow us to save and fetch todo items from a Postgres database."}]},{"type":"element","tag":"h2","props":{"id":"project-setup"},"children":[{"type":"text","value":"Project Setup"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To start the project setup, create a directory (folder) with the name of your project. Here I'll create a directory named "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"todo-go-backend"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's initialize Go module in our project so that we can install libraries using go mod. Run the following command in the project directory:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go mod init your-module-name\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go mod init your-module-name\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Most popular convention for naming the go modules is this, Let's assume you are going to push your project on GitHub then module name would look something like this "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"github.com/[your-username]/[project-name]"}]},{"type":"text","value":". So here I am going to name the module "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"github.com/dvlpr-shivendra/todo-go-backend"}]},{"type":"text","value":". So I would initialize the module like this:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go mod init github.com/dvlpr-shivendra/todo-go-backend\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go mod init github.com/dvlpr-shivendra/todo-go-backend\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now inside the project directory create a file named "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"main.go"}]},{"type":"text","value":" and paste the following code in that file."}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package main\n\nfunc main() {\n    //\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package main\n\nfunc main() {\n    //\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"gin-setup"},"children":[{"type":"text","value":"Gin Setup"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First of all let's install Gin. Run the following command in the project's root directory:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go get -u github.com/gin-gonic/gin\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go get -u github.com/gin-gonic/gin\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now import the Gin inside the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"main.go"}]},{"type":"text","value":". Add following code below the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"package main"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"import (\n  \"github.com/gin-gonic/gin\"\n)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import (\n  \"github.com/gin-gonic/gin\"\n)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Inside the main function add this code to initialize the router:"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"r := gin.Default()\n\nr.Run() // listen and serve on localhost:8080\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"r := gin.Default()\n\nr.Run() // listen and serve on localhost:8080\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now we are ready to add end points to the router. Let's add an endpoint to add todo items. Add this code below the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"r := gin.Default()"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"r.POST(\"/todos\", handleAddTodo)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"r.POST(\"/todos\", handleAddTodo)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now ff we hit "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"POST http://localhost:8080/todos"}]},{"type":"text","value":" in the browser then Gin will execute handleAddTodo function, So let's add that above the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"main function"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"func handleAddTodo(c *gin.Context) {\n    c.JSON(200, gin.H{\n        \"message\": \"Here we'll add a new todo\",\n    })\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func handleAddTodo(c *gin.Context) {\n    c.JSON(200, gin.H{\n        \"message\": \"Here we'll add a new todo\",\n    })\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Every Gin route handler receives "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"*gin.Context"}]},{"type":"text","value":" in the argument. Using "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"gin.Context"}]},{"type":"text","value":" we can interact with the request and send the response back."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Right now the complete main.go would look like this"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc handleAddTodo(c *gin.Context) {\n    c.JSON(200, gin.H{\n        \"message\": \"Here we'll add a new todo\",\n    })\n}\n\nfunc main() {\n    r := gin.Default()\n\n    r.POST(\"/todos\", handleAddTodo)\n\n    r.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc handleAddTodo(c *gin.Context) {\n    c.JSON(200, gin.H{\n        \"message\": \"Here we'll add a new todo\",\n    })\n}\n\nfunc main() {\n    r := gin.Default()\n\n    r.POST(\"/todos\", handleAddTodo)\n\n    r.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's test our changes so far. Execute "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"go run main.go"}]},{"type":"text","value":" in the terminal to start the application."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now open some API client and make a "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"POST"}]},{"type":"text","value":" request at "},{"type":"element","tag":"a","props":{"href":"http://localhost:8080/todos","rel":["nofollow"]},"children":[{"type":"text","value":"http://localhost:8080/todos"}]},{"type":"text","value":" and you should get the following response:"}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"{\n    \"message\": \"Here we'll add a new todo\"\n}\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"message\": \"Here we'll add a new todo\"\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now we are ready to install and use GORM."}]},{"type":"element","tag":"h2","props":{"id":"gorm-setup"},"children":[{"type":"text","value":"GORM Setup"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To install GORM run the following command in the terminal:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go get -u gorm.io/gorm\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go get -u gorm.io/gorm\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now let's install Postgres driver for GORM"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"go get -u gorm.io/driver/postgres\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go get -u gorm.io/driver/postgres\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We are now ready to connect to the Postgres database. Let's import GORM and the Postgres driver in the import section. After importing the import section should look like this:"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"\"github.com/gin-gonic/gin\"\n\n\"gorm.io/gorm\"\n\"gorm.io/driver/postgres\"\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\"github.com/gin-gonic/gin\"\n\n\"gorm.io/gorm\"\n\"gorm.io/driver/postgres\"\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now let's add a global variable to store the gorm.DB instance, which we'll use to interact with the database. We can add the variable below the import section:"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"var db *gorm.DB\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var db *gorm.DB\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We need to define the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Todo struct"}]},{"type":"text","value":". We'll use this struct to create todo table and to create todo items. Add following code below the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"import section"}]}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"type Todo struct {\n    gorm.Model\n    Title     string `json:\"title\"`\n    Completed string `json:\"completed\" gorm:\"default:false\"`\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Todo struct {\n    gorm.Model\n    Title     string `json:\"title\"`\n    Completed string `json:\"completed\" gorm:\"default:false\"`\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"below the db variable let's add a function to connect to the database and store the db instance in the global variable "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"db"}]},{"type":"text","value":" which we just created."}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"func initDb() {\n    var err error\n\n    dsn := \"host=localhost user=postgres password=postgres dbname=todo-app port=5432 sslmode=disable\"\n\n    db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\n    if err != nil {\n        panic(err)\n    }\n\n    db.AutoMigrate(&Todo{}) // create table if not exist\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func initDb() {\n    var err error\n\n    dsn := \"host=localhost user=postgres password=postgres dbname=todo-app port=5432 sslmode=disable\"\n\n    db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\n    if err != nil {\n        panic(err)\n    }\n\n    db.AutoMigrate(&Todo{}) // create table if not exist\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add the details in the dsn string as per your postgres installation."}]},{"type":"element","tag":"h3","props":{"id":"updating-handleaddtodo-to-save-todos-in-database-using-gorm"},"children":[{"type":"text","value":"Updating handleAddTodo to save Todos in database using Gorm"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now let's update the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"handleAddTodo"}]},{"type":"text","value":" to save the todo item in the database using GORM"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"func handleAddTodo(c *gin.Context) {\n    var todo Todo\n    \n    c.BindJSON(&todo) // bind request body to struct\n\n    db.Create(&todo) // insert data to database\n\n    c.JSON(200, todo) // send response\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func handleAddTodo(c *gin.Context) {\n    var todo Todo\n    \n    c.BindJSON(&todo) // bind request body to struct\n\n    db.Create(&todo) // insert data to database\n\n    c.JSON(200, todo) // send response\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now make a "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"POST"}]},{"type":"text","value":" request at "},{"type":"element","tag":"a","props":{"href":"http://localhost:8080/todos","rel":["nofollow"]},"children":[{"type":"text","value":"http://localhost:8080/todos"}]},{"type":"text","value":" . The body of the request should contain following JSON"}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"{\n    \"title\": \"Write a blog\"\n}\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"title\": \"Write a blog\"\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If everything went as expected then todo should get inserted in a table name "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"todos"}]},{"type":"text","value":" and response body should contain the newly created todo."}]},{"type":"element","tag":"h3","props":{"id":"endpoint-to-fetch-todo-list"},"children":[{"type":"text","value":"Endpoint to fetch Todo list"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's add the endpoint to fetch todo list. To define the endpoint add the following code above the endpoint to save todo."}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"r.GET(\"/todos\", handleFetchTodos)\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"r.GET(\"/todos\", handleFetchTodos)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now let's define "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"handleFetchTodos"}]},{"type":"text","value":" below the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"handleSaveTodo"}]},{"type":"text","value":" function"}]},{"type":"element","tag":"pre","props":{"className":["language-go"],"code":"func handleFetchTodos(c *gin.Context) {\n    var todos []Todo\n    db.Find(&todos)\n    c.JSON(200, todos)\n}\n","language":"go","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"func handleFetchTodos(c *gin.Context) {\n    var todos []Todo\n    db.Find(&todos)\n    c.JSON(200, todos)\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now make a get request to GET "},{"type":"element","tag":"a","props":{"href":"http://localhost:8080/todos","rel":["nofollow"]},"children":[{"type":"text","value":"http://localhost:8080/todos"}]},{"type":"text","value":" and you should get the array todo in response."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"project-setup","depth":2,"text":"Project Setup"},{"id":"gin-setup","depth":2,"text":"Gin Setup"},{"id":"gorm-setup","depth":2,"text":"GORM Setup","children":[{"id":"updating-handleaddtodo-to-save-todos-in-database-using-gorm","depth":3,"text":"Updating handleAddTodo to save Todos in database using Gorm"},{"id":"endpoint-to-fetch-todo-list","depth":3,"text":"Endpoint to fetch Todo list"}]}]}},"_type":"markdown","_id":"content:posts:create-rest-api-with-go-gin-gorm-and-postgres.md","_source":"content","_file":"posts/create-rest-api-with-go-gin-gorm-and-postgres.md","_stem":"posts/create-rest-api-with-go-gin-gorm-and-postgres","_extension":"md"},{"_path":"/posts/how-to-reset-logitech-keyboard","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"How to Reset Logitech Keyboard","description":"A quick guide to reset logitech keyboard if you are facing any software/firmware related issue","date":"2024-06-16T08:37:29.000Z","tags":["Logitech","keyboard","reset","PopKeys","f2","blinking"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Press these keys individually in the mentioned order do not press them together:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"esc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"o (this is alphabet o not zero)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"esc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"o"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"esc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"b"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After successful reset keyboards which can connect up to three devices should have the LEDs blinking on F1, F2, and F3 keys."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There may be few reasons you want to reset your logitech keyboard, something is not working as expected, the keyboard is powering on but not functioning at all or you are reselling your keyboard."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In my case the LED over the f2 key was blinking on my Logitech PopKeys and it was not connecting to any device. After successful reset I turned off the keyboard and then turned it back on. This resolved the issue and the keyboard started working properly."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:posts:how-to-reset-logitech-keyboard.md","_source":"content","_file":"posts/how-to-reset-logitech-keyboard.md","_stem":"posts/how-to-reset-logitech-keyboard","_extension":"md"},{"_path":"/posts/how-to-use-wxwidgets-with-visual-studio-2022","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"How to Use wxWidgets with Visual Studio 2022","description":"This post will guide you on how to build wxWidgets from source and use in your project","date":"2022-12-12T16:56:52.000Z","draft":false,"tags":["CPP","wxWidgets","VisualStudio","VisualStudio2022"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This post will guide you on how to build wxWidgets from source and use in your project.\nFirst of all go to "},{"type":"element","tag":"a","props":{"href":"https://www.wxWidgets.org/downloads","rel":["nofollow"]},"children":[{"type":"text","value":"wxWidgets.com/downloads"}]},{"type":"text","value":" and then download the Windows ZIP file from the Source code section."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"download wxWidgets source windows","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/download-wxWidgets-source-for-windows.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now you can make a folder with the name SDKs (or whatever you prefer) and unzip the downloaded the source code in that folder. If you created the SDKs folder in C drive then right now your path to source code directory would be like this "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"C:\\SDKs\\wxWidgets-3.2.1"}]},{"type":"text","value":". You would see the version you downloaded in place of 3.2.1 . Now double click on "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"build\\msw\\wx_vc17.sln"}]},{"type":"text","value":" inside the source code folder and the wxWidgets source would open in the Visual Studio."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now we are ready to build the wxWidgets. Click on the build button in the menu bar and then click batch build."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"download wxWidgets source windows","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/wxWidgets-batch-build.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now batch build popup will open up. Click select all and then click build.\n"},{"type":"element","tag":"img","props":{"alt":"download wxWidgets source windows","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/wxWidgets-batch-build-popup.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Depending upon your hardware build process may take 10-15 minutes. If your build process fails then you can try "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"rebuild"}]},{"type":"text","value":" button on the batch build popup. Once build is completed we are ready to use the wxWidgets in our project."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Add wxWidgets folder path as ENV variable"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now we will add wxWidgets folder path as ENV variable to we do not have to hardcode it in the project. To open environment variables setting use the following steps.\n"},{"type":"element","tag":"img","props":{"alt":"open environment variable settings in windows","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/open-env-variable-settings-windows.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now put WXWIN in the variable name and path to the wxWidgets folder in the variable value\n"},{"type":"element","tag":"img","props":{"alt":"open environment variable settings in windows","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/add-env-variable-for-user-windows.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Using the wxWidgets"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a new project in the Visual Studio and in the project type select Windows Desktop Application."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"download wxWidgets source windows","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/creating-project-for-wxWidgets.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now in the next step. Provide the name for your project and then click create"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"create new project","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/wxWidgets-project-name-and-create.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once the project is opened in the Visual Studio open the .cpp file from the Source files section in solution explorer. File name would have the same name as the project. For example if The project name is HelloWX then file would be HelloWX.cpp"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"open main file","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/open-main-file.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now copy and paste this code in the file you just opened:"}]},{"type":"element","tag":"pre","props":{"className":["language-cpp"],"code":"#include <wx/wx.h>\n\nclass MyApp : public wxApp\n{\npublic:\n   virtual bool OnInit();\n};\nclass MyFrame : public wxFrame\n{\npublic:\n   MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);\n};\n\nwxIMPLEMENT_APP(MyApp);\n\nbool MyApp::OnInit()\n{\n   MyFrame* frame = new MyFrame(\"Hello World\", wxPoint(50, 50), wxSize(450, 340));\n   frame->Show(true);\n   return true;\n}\nMyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)\n   : wxFrame(NULL, wxID_ANY, title, pos, size)\n{\n\n}\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#include <wx/wx.h>\n\nclass MyApp : public wxApp\n{\npublic:\n   virtual bool OnInit();\n};\nclass MyFrame : public wxFrame\n{\npublic:\n   MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);\n};\n\nwxIMPLEMENT_APP(MyApp);\n\nbool MyApp::OnInit()\n{\n   MyFrame* frame = new MyFrame(\"Hello World\", wxPoint(50, 50), wxSize(450, 340));\n   frame->Show(true);\n   return true;\n}\nMyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)\n   : wxFrame(NULL, wxID_ANY, title, pos, size)\n{\n\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After pasting this code you would see the error on "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"#include wx/wx.h"}]},{"type":"text","value":" line. So now we need to include the wxWidgets files that we compiled earlier into our project.\nRight click on the project name in the solution explorer and then click properties.\n"},{"type":"element","tag":"img","props":{"alt":"open project setting in visual studio","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/open-visual-studio-project-setting.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now under "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"C/C++"}]},{"type":"text","value":" section click on general\n"},{"type":"element","tag":"img","props":{"alt":"open C/C++ general setting","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/open-c-cpp-project-setting-visual-studio.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now in the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Additional include Directories"}]},{"type":"text","value":" we'll add the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"include"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"include\\msvc"}]},{"type":"text","value":" directories of the wxWidgets which we have build. We will use the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"WXWIN"}]},{"type":"text","value":" environment variable that we created earlier. Add this in "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"$(WXWIN)\\include; $(WXWIN)\\include\\msvc"}]},{"type":"text","value":" in the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Additional include Directories"}]},{"type":"text","value":".\n"},{"type":"element","tag":"img","props":{"alt":"open C/C++ general setting","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/include-wxWidgets.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now open general from "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Linker"}]},{"type":"text","value":" section.\n"},{"type":"element","tag":"img","props":{"alt":"open Linker setting","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/link-wxWidgets.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"$(WXWIN)\\lib\\vc_lib"}]},{"type":"text","value":" in the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Additional include Directories"}]},{"type":"text","value":" and click OK button."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now the error on "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"#include wx/wx.h"}]},{"type":"text","value":" line should go away and we are ready to build the project."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We have included the 32 bit version of wxWidgets in our project, so we need to select "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"x86"}]},{"type":"text","value":" in the solution platforms."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Visual Studio change build target ot x86","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/select-x86-in-solution-platforms.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now to run the project click on "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Start Without Debugging"}]},{"type":"text","value":" button."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Running the project in Visual code without debugging","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/run-the-project.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now you should get an empty window with Hello World in the title bar."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Output of the wxWidgets hello world project","src":"/posts/how-to-use-wxwidgets-with-visual-studio-2022/wx-hello-world-window.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you get the above window on running the project then you have included the wxWidgets into your project correctly."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:posts:how-to-use-wxwidgets-with-visual-studio-2022.md","_source":"content","_file":"posts/how-to-use-wxwidgets-with-visual-studio-2022.md","_stem":"posts/how-to-use-wxwidgets-with-visual-studio-2022","_extension":"md"}]